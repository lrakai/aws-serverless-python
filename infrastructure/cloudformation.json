{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Serverless Web Development with Python for AWS",
    "Parameters": {
        "Region": {
            "Type": "String",
            "Default": "us-west-2"
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/20"
            },
            "SubnetA": {
                "CIDR": "10.0.0.0/24",
                "AZ": "us-west-2a"
            }
        },
        "Ec2InstanceConfig": {
            "Metadata": {
                "InstanceName": "Dev Instance"
            }
        },
        "UserConfig": {
            "Login": {
                "Name": "student",
                "Pass": "password"
            }
        }
    },
    "Resources": {
        "Ec2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "SubnetA",
                        "AZ"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "Ec2InstanceProfile"
                },
                "ImageId": "ami-6e1a0117",
                "InstanceType": "t2.medium",
                "KeyName": {
                    "Ref": "AWS::AccountId"
                },
                "SecurityGroupIds": [
					{
						"Ref": "Ec2SecurityGroup"
					}
				],
                "SubnetId": {
                    "Ref": "SubnetA"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::FindInMap": [
                                "Ec2InstanceConfig",
                                "Metadata",
                                "InstanceName"
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "apt-get install git -y\n",
								"cd /tmp/\n",
								"git clone https://github.com/lrakai/ca-python-serverless\n",
								"cd ca-python-serverless\n",
								"git checkout -b lab\n",
								"git pull origin lab\n",
								"cd ..\n",
								"tar -cf ca-python-serverless.tar --exclude \\.git* ca-python-serverless\n",
								"tar -xf ca-python-serverless.tar -C /home/ubuntu/\n",
								"add-apt-repository ppa:jonathonf/python-3.6 --yes\n",
								"apt-get update\n",
								"apt-get install -y python3.6 python3.6-dev libssl-dev \n",
								"apt-get install -y python3-pip virtualenv zip\n",
								"mkdir -p /app_files\n",
								"cd /app_files\n",
								"virtualenv -p /usr/bin/python3.6 venv\n",
								"source /app_files/venv/bin/activate\n",
								"pip install moto\n",
								"pip install moto[server]\n",
								"pip install -r requirements.txt\n",
								"source /app_files/venv/bin/activate\n",
								"pip install awscli\n",
								"mkdir -p /home/ubuntu/.aws\n",
								"ln -s /app_files/credentials /home/ubuntu/.aws/\n",
								"echo \"source /app_files/venv/bin/activate\" | sudo tee -a /etc/profile\n",
								"grep -q -F 'PYTHONPATH=\"/app_files:$PYTHONPATH\"' /etc/environment || echo 'PYTHONPATH=\"/app_files:$PYTHONPATH\"' | sudo tee -a /etc/environment\n",
								"cd ~\n",
								"wget https://github.com/awslabs/aws-sam-local/releases/download/v0.2.2/sam_0.2.2_linux_amd64.deb\n",
								"dpkg -i sam_0.2.2_linux_amd64.deb\n",
								"apt-get -f install\n",
								"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n",
								"add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n",
								"apt-get update\n",
								"apt-cache policy docker-ce\n",
								"apt-get install -y docker-ce\n"
                            ]
                        ]
                    }
                }
            }
        },
        "Ec2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "iot-full-access",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iot:*"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "Ec2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "Ec2Role"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Lab",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "Lab VPC"
                    }
                ]
            }
        },
        "SubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "SubnetA",
                        "AZ"
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "SubnetA",
                        "CIDR"
                    ]
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "InternetGatewayAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "SubnetARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetA"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "Ec2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Development",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3000",
                        "ToPort": "3000",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "Group": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "GroupName": "Students",
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "students-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:Describe*",
                                        "ec2:List*"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow",
                                    "Condition": {
                                        "StringEquals": {
                                            "ec2:Region": "us-west-2"
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:*AccessKey"
                                    ],
                                    "Resource": [
                                        "arn:aws:iam::*:user/student"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
										"lambda:ListFunctions",
										"cognito-idp:CreateUserPool",
										"cognito-idp:List*",
										"cognito-idp:Get*",
										"dynamodb:*",
										"s3:GetBucketLocation",
										"s3:ListAllMyBuckets",
										"s3:ListBucket",
										"s3:ListBucketVersions",
										"s3:GetObject",
										"s3:GetObjectAcl",
										"s3:CreateBucket",
										"s3:PutObject",
										"s3:PutBucketWebsite",
										"s3:PutBucketPolicy",
										"s3:GetBucketTagging",
										"s3:GetBucketVersioning",
										"s3:PutBucketTagging",
										"s3:PutBucketCORS"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Effect": "Deny",
                                    "Action": [
                                        "ec2:ModifyInstanceAttribute",
                                        "ec2:*Reserved*",
                                        "ec2:*Spot*",
                                        "dynamodb:*Reserved*",
                                        "rds:*Reserved*",
                                        "elasticache:*Reserved*",
                                        "redshift:*Reserved*",
                                        "aws-marketplace:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "User": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "LoginProfile": {
                    "Password": {
                        "Fn::FindInMap": [
                            "UserConfig",
                            "Login",
                            "Pass"
                        ]
                    }
                },
                "Path": "/",
                "Groups": [
                    "Students"
                ],
                "UserName": {
                    "Fn::FindInMap": [
                        "UserConfig",
                        "Login",
                        "Name"
                    ]
                }
            }
        }
    }
}